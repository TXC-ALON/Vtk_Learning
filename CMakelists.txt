cmake_minimum_required(VERSION 3.10)

# 项目名称和版本
project(Qt5_test VERSION 1.0)
# Instruct CMake to run moc and uic automatically when needed.
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
# 设置C++标准
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED True)

find_package(VTK COMPONENTS 
  CommonColor
  CommonCore
  CommonDataModel
  FiltersGeneral
  FiltersSources
  IOGeometry
  IOLegacy
  IOPLY
  IOXML
  InteractionStyle
  RenderingContextOpenGL2
  RenderingCore
  RenderingFreeType
  RenderingGL2PSOpenGL2
  RenderingOpenGL2
  RenderingVolumeOpenGL2
  CommonComputationalGeometry
  InteractionWidgets
  FiltersCore
  FiltersModeling
  CommonTransforms
  RenderingAnnotation
  GUISupportQt
  RenderingQt
  
)

find_package(Qt5 COMPONENTS Widgets Core Gui REQUIRED)
set(VTK_INSTALL_PREFIX "D:/Dev/VTK")
message("VTK_INSTALL_PREFIX is ${VTK_INSTALL_PREFIX}")
set(VTK_DLL_DIRS ${VTK_INSTALL_PREFIX}/bin)
set(PROJECT_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/include)
set(VTK_INCLUDE ${VTK_INSTALL_PREFIX}/include/vtk-9.3)
set(BIN_OUTPUT_DIR ${VTK_DLL_DIRS}/)
# file(COPY ${BIN_OUTPUT_DIR} DESTINATION ${CMAKE_BINARY_DIR}/BIN)
message("VTK_INCLUDE" is ${VTK_INCLUDE})
message("PROJECT_INCLUDE" is ${PROJECT_INCLUDE})
if(NOT VTK_FOUND)
  message(FATAL_ERROR "${PROJECT_NAME}: Unable to find the VTK build folder.")
endif()

if(NOT(TARGET VTK::GUISupportQt))
  message(FATAL_ERROR "${PROJECT_NAME}: VTK not built with Qt support.")
endif()

if(NOT DEFINED VTK_QT_VERSION)
  set(VTK_QT_VERSION 5)
endif()

set(qt_components Core Gui Widgets)
if(${VTK_QT_VERSION} VERSION_GREATER_EQUAL 6)
  list(APPEND qt_components OpenGLWidgets)
endif()
list(SORT qt_components)
# We have ui files, so this will also bring in the macro:
#   qt5_wrap_ui or qt_wrap_ui from Widgets.
find_package(Qt${VTK_QT_VERSION}
  REQUIRED COMPONENTS ${qt_components}
)

foreach(_qt_comp IN LISTS qt_components)
  list(APPEND qt_modules "Qt${VTK_QT_VERSION}::${_qt_comp}")
endforeach()

message (STATUS "VTK_VERSION: ${VTK_VERSION}, Qt Version: ${Qt${VTK_QT_VERSION}Widgets_VERSION}")



include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
message("CMAKE_CURRENT_SOURCE_DIR is ${CMAKE_CURRENT_SOURCE_DIR}")
message("CMAKE_CURRENT_BINARY_DIR is ${CMAKE_CURRENT_BINARY_DIR}")
# 包含头文件目录
include_directories(${PROJECT_INCLUDE})
include_directories(${VTK_INCLUDE})
# 添加头文件和源文件
file(GLOB_RECURSE HEADER_FILES "include/*.h")
file(GLOB_RECURSE UI_FILES "Ui/*.h")

source_group(include FILES ${HEADER_FILES} ${UI_FILES})
# 添加VTK头文件和源文件
file(GLOB_RECURSE VTK_HEADER_FILES "${VTK_INCLUDE}/*.h")

source_group("VTK_INCLUDE" FILES ${VTK_HEADER_FILES})
set(SOURCE_DIR src)
aux_source_directory(${SOURCE_DIR} SOURCE_FILES)
# 设置可执行文件输出目录
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

file(GLOB UI_FILES *.ui)
file(GLOB QT_WRAP *.h)
file(GLOB CXX_FILES *.cxx)

# 项目名称
add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${CXX_FILES} ${UISrcs} ${QT_WRAP} ${SOURCE_FILES} ${HEADER_FILES})
target_include_directories(${PROJECT_NAME} PUBLIC $<$<CONFIG:Debug>:${INCLUDE}>)
target_include_directories(${PROJECT_NAME} PUBLIC $<$<CONFIG:Release>:${INCLUDE}>)
target_include_directories(${PROJECT_NAME} PUBLIC $<$<CONFIG:Debug>:${PROJECT_INCLUDE}>)
target_include_directories(${PROJECT_NAME} PUBLIC $<$<CONFIG:Release>:${PROJECT_INCLUDE}>)
target_include_directories(${PROJECT_NAME} PUBLIC $<$<CONFIG:Debug>:${VTK_INCLUDE}>)
target_include_directories(${PROJECT_NAME} PUBLIC $<$<CONFIG:Release>:${VTK_INCLUDE}>)

target_link_libraries(${PROJECT_NAME} ${qt_modules})
target_link_libraries(${PROJECT_NAME} ${VTK_LIBRARIES})
message("VTK_LIBRARIES" is ${VTK_LIBRARIES})
# vtk_module_autoinit is needed
vtk_module_autoinit(
  TARGETS ${PROJECT_NAME}
  MODULES ${VTK_LIBRARIES}
)