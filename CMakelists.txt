cmake_minimum_required(VERSION 3.10)

# 项目名称和版本
project(Qt5_test VERSION 1.0)
# Instruct CMake to run moc and uic automatically when needed.
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
# 设置C++标准
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)
# 设定基本路径
set(Dev_PREFIX "D:/Dev")
set(CMAKE_TOOLCHAIN_FILE "" CACHE FILEPATH "Vcpkg toolchain file")
set(PROJECT_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/include)
set(EIGEN_PATH "${Dev_PREFIX}/Eigen")
set(ThreeDAXE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/ThreeDAxes)

set(EIGEN_MACROS_H_PATH "${EIGEN_PATH}/Eigen/src/Core/util/Macros.h")
# 从Macros.h中读取版本号
file(STRINGS "${EIGEN_MACROS_H_PATH}" eigen_version_lines REGEX "#define EIGEN_[A-Z]+_VERSION")
# 正则表达式匹配版本号
string(REGEX REPLACE ".*#define EIGEN_WORLD_VERSION ([0-9]+).*" "\\1" eigen_world_version "${eigen_version_lines}")
string(REGEX REPLACE ".*#define EIGEN_MAJOR_VERSION ([0-9]+).*" "\\1" eigen_major_version "${eigen_version_lines}")
string(REGEX REPLACE ".*#define EIGEN_MINOR_VERSION ([0-9]+).*" "\\1" eigen_minor_version "${eigen_version_lines}")
# 连接版本号
set(eigen_version "${eigen_world_version}.${eigen_major_version}.${eigen_minor_version}")

## boost
set(BOOST_ROOT "D:/Dev/Boost/x64")
set(Boost_INCLUDE_DIRS "D:/Dev/Boost/x64/include/boost-1_82/boost")
set(Boost_LIBRARY_DIR "D:/Dev/Boost/x64/lib")
set(Boost_NO_SYSTEM_PATHS ON)

## vtk
set(VTK_INSTALL_PREFIX ${Dev_PREFIX}/VTK)
set(VTK_DLL_DIRS ${VTK_INSTALL_PREFIX}/bin)
set(VTK_INCLUDE ${VTK_INSTALL_PREFIX}/include/vtk-9.3)

#find_packages
find_package(VTK COMPONENTS 
  CommonColor
  CommonCore
  CommonDataModel
  FiltersGeneral
  FiltersSources
  IOGeometry
  IOLegacy
  IOPLY
  IOXML
  InteractionStyle
  RenderingContextOpenGL2
  RenderingCore
  RenderingFreeType
  RenderingGL2PSOpenGL2
  RenderingOpenGL2
  RenderingVolumeOpenGL2
  CommonComputationalGeometry
  InteractionWidgets
  FiltersCore
  FiltersModeling
  CommonTransforms
  RenderingAnnotation
  GUISupportQt
  RenderingQt
  
)
find_package(Qt5 COMPONENTS Widgets Core Gui REQUIRED)
find_package(Boost REQUIRED COMPONENTS system filesystem thread)

if(NOT VTK_FOUND)
  message(FATAL_ERROR " ${PROJECT_NAME}:  Unable to find the VTK build folder.")
endif()

if(NOT(TARGET VTK::GUISupportQt))
  message(FATAL_ERROR "${PROJECT_NAME}: VTK not built with Qt support.")
endif()

if(NOT DEFINED VTK_QT_VERSION)
  set(VTK_QT_VERSION 5)
endif()

set(qt_components Core Gui Widgets)
if(${VTK_QT_VERSION} VERSION_GREATER_EQUAL 6)
  list(APPEND qt_components OpenGLWidgets)
endif()
list(SORT qt_components)

find_package(Qt${VTK_QT_VERSION}
  REQUIRED COMPONENTS ${qt_components}
)

foreach(_qt_comp IN LISTS qt_components)
  list(APPEND QT_MODULES "Qt${VTK_QT_VERSION}::${_qt_comp}")
endforeach()

message (STATUS "Boost Version: ${Boost_VERSION}
-- Eigen version: ${eigen_version}
-- Qt Version: ${Qt${VTK_QT_VERSION}Widgets_VERSION}
-- VTK_VERSION: ${VTK_VERSION}
")

# 添加头文件和源文件
file(GLOB_RECURSE HEADER_FILES "include/*" "Ui/*")
# 添加VTK头文件和源文件
file(GLOB_RECURSE VTK_HEADER_FILES "${VTK_INCLUDE}/*.h")

set(SOURCE_DIR src)
aux_source_directory(${SOURCE_DIR} SOURCE_FILES)
# 设置可执行文件输出目录
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
message("VTK_INCLUDE is ${VTK_INCLUDE}")
message("${Boost_LIBRARIES}")
foreach(item IN LISTS ${Boost_LIBRARIES})
    message(STATUS "Boost_LIBRARIES item: ${item}")
endforeach()

foreach(item IN LISTS HEADER_FILES)
    message(STATUS " --HEADER_FILES item: ${item}")
endforeach()

message("ThreeDAXE_PATH = ${ThreeDAXE_PATH}")
file(GLOB ThreeD_Files "${ThreeDAXE_PATH}/*.cpp") # 假设源文件在名为"src"的子目录下
# foreach(item IN LISTS ThreeD_Files)
#     message(STATUS " ThreeD_Files item: ${item}")
# endforeach()
# 项目名称
set(P3DS_PATH ${CMAKE_CURRENT_SOURCE_DIR}/P3DS)
message("P3DS_PATH : ${P3DS_PATH}")

add_subdirectory(P3DS)

if (WIN32)
    add_definitions(-DNOMINMAX)
endif()
add_executable(${PROJECT_NAME} ${SOURCE_FILES} ${HEADER_FILES} ${P3DS_DIR_SOURCES} ${ThreeD_Files})

target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_INCLUDE})
target_include_directories(${PROJECT_NAME} PUBLIC ${Boost_INCLUDE_DIRS})
target_include_directories(${PROJECT_NAME} PUBLIC ${VTK_INCLUDE})
target_include_directories(${PROJECT_NAME} PUBLIC ${ThreeDAXE_PATH})

set(ADDED_DIRS "")
# 获取所有头文件目录
file(GLOB_RECURSE HEADER_DIRS RELATIVE ${CMAKE_SOURCE_DIR} "${CMAKE_SOURCE_DIR}/P3DS/*")
# 遍历每个子目录并将其添加为目标的包含目录
foreach(subdir ${HEADER_DIRS})
  get_filename_component(subdir_dir "${subdir}" DIRECTORY)
    list(FIND ADDED_DIRS "${subdir_dir}" index)
    if (index EQUAL -1)
        # 如果目录未添加，则添加到列表中，并添加为目标的包含目录
        list(APPEND ADDED_DIRS "${subdir_dir}")
        message("Adding directory: ${subdir_dir}")
        target_include_directories(${PROJECT_NAME} PUBLIC "${subdir_dir}")
    else()
        #message("Directory already added: ${subdir_dir}")
    endif()
endforeach()
## 直接包含编译
target_include_directories(${PROJECT_NAME} PUBLIC ${EIGEN_PATH})
target_link_libraries(${PROJECT_NAME} ${QT_MODULES})
target_link_libraries(${PROJECT_NAME} ${VTK_LIBRARIES})
target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})


# # vtk_module_autoinit is needed
# vtk_module_autoinit(
#   TARGETS ${PROJECT_NAME}
#   MODULES ${VTK_LIBRARIES}
# )