cmake_minimum_required(VERSION 3.10)

# 项目名称和版本
project(Qt5_test VERSION 1.0)
# Instruct CMake to run moc and uic automatically when needed.
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
# 设置C++标准
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED True)
# 设定基本路径
set(Dev_PREFIX "D:/Dev/")
set(CMAKE_TOOLCHAIN_FILE "" CACHE FILEPATH "Vcpkg toolchain file")
set(PROJECT_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/include)
set(P3DS_PATH "Dev_PREFIX/P3DS")
## boost
set(BOOST_ROOT "D:/Dev/Boost/x64")
set(Boost_INCLUDE_DIRS "D:/Dev/Boost/x64/include/boost-1_82/boost")
set(Boost_LIBRARY_DIR "D:/Dev/Boost/x64/lib")
set(Boost_NO_SYSTEM_PATHS ON)

## vtk
set(VTK_INSTALL_PREFIX ${Dev_PREFIX}/VTK)
set(VTK_DLL_DIRS ${VTK_INSTALL_PREFIX}/bin)
set(VTK_INCLUDE ${VTK_INSTALL_PREFIX}/include/vtk-9.3)


#find_packages
find_package(VTK COMPONENTS 
  CommonColor
  CommonCore
  CommonDataModel
  FiltersGeneral
  FiltersSources
  IOGeometry
  IOLegacy
  IOPLY
  IOXML
  InteractionStyle
  RenderingContextOpenGL2
  RenderingCore
  RenderingFreeType
  RenderingGL2PSOpenGL2
  RenderingOpenGL2
  RenderingVolumeOpenGL2
  CommonComputationalGeometry
  InteractionWidgets
  FiltersCore
  FiltersModeling
  CommonTransforms
  RenderingAnnotation
  GUISupportQt
  RenderingQt
  
)
find_package(Qt5 COMPONENTS Widgets Core Gui REQUIRED)
find_package(Boost COMPONENTS regex system REQUIRED)

if(NOT VTK_FOUND)
  message(FATAL_ERROR "${PROJECT_NAME}: Unable to find the VTK build folder.")
endif()

if(NOT(TARGET VTK::GUISupportQt))
  message(FATAL_ERROR "${PROJECT_NAME}: VTK not built with Qt support.")
endif()

if(NOT DEFINED VTK_QT_VERSION)
  set(VTK_QT_VERSION 5)
endif()

set(qt_components Core Gui Widgets)
if(${VTK_QT_VERSION} VERSION_GREATER_EQUAL 6)
  list(APPEND qt_components OpenGLWidgets)
endif()
list(SORT qt_components)

find_package(Qt${VTK_QT_VERSION}
  REQUIRED COMPONENTS ${qt_components}
)

foreach(_qt_comp IN LISTS qt_components)
  list(APPEND QT_MODULES "Qt${VTK_QT_VERSION}::${_qt_comp}")
endforeach()

message (STATUS "
-- VTK_VERSION: ${VTK_VERSION}
-- Qt Version: ${Qt${VTK_QT_VERSION}Widgets_VERSION}
-- Boost Version: ${Boost_VERSION}
")

# 添加头文件和源文件
file(GLOB_RECURSE HEADER_FILES "include/*")
# 添加VTK头文件和源文件
file(GLOB_RECURSE VTK_HEADER_FILES "${VTK_INCLUDE}/*.h")

source_group("VTK_INCLUDE" FILES ${VTK_HEADER_FILES})
set(SOURCE_DIR src)
aux_source_directory(${SOURCE_DIR} SOURCE_FILES)
# 设置可执行文件输出目录
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)

# 项目名称
add_executable(${PROJECT_NAME} ${SOURCE_FILES} ${HEADER_FILES})
target_include_directories(${PROJECT_NAME} PUBLIC $<$<CONFIG:Debug>:${PROJECT_INCLUDE}>)
target_include_directories(${PROJECT_NAME} PUBLIC $<$<CONFIG:Release>:${PROJECT_INCLUDE}>)


target_link_libraries(${PROJECT_NAME} ${QT_MODULES})
target_link_libraries(${PROJECT_NAME} ${VTK_LIBRARIES})

# # vtk_module_autoinit is needed
# vtk_module_autoinit(
#   TARGETS ${PROJECT_NAME}
#   MODULES ${VTK_LIBRARIES}
# )